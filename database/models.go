// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AwsAccountType string

const (
	AwsAccountTypeDevelopment AwsAccountType = "development"
	AwsAccountTypeStaging     AwsAccountType = "staging"
	AwsAccountTypeProduction  AwsAccountType = "production"
)

func (e *AwsAccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AwsAccountType(s)
	case string:
		*e = AwsAccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AwsAccountType: %T", src)
	}
	return nil
}

type NullAwsAccountType struct {
	AwsAccountType AwsAccountType
	Valid          bool // Valid is true if AwsAccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAwsAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AwsAccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AwsAccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAwsAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AwsAccountType), nil
}

type AwsResourceType string

const (
	AwsResourceTypeEc2Instance       AwsResourceType = "ec2-instance"
	AwsResourceTypeSimpleRdsInstance AwsResourceType = "simple-rds-instance"
)

func (e *AwsResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AwsResourceType(s)
	case string:
		*e = AwsResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for AwsResourceType: %T", src)
	}
	return nil
}

type NullAwsResourceType struct {
	AwsResourceType AwsResourceType
	Valid           bool // Valid is true if AwsResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAwsResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.AwsResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AwsResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAwsResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AwsResourceType), nil
}

type AwsAccount struct {
	AccountID      string
	AccountType    AwsAccountType
	DefaultProfile pgtype.Int4
}

type AwsResource struct {
	ResourceAwsID string
	ResourceID    int64
	AwsAccount    string
	ResourceType  AwsResourceType
}

type SchedulerProfile struct {
	ProfileID   int32
	ProfileName string
	MonStart    pgtype.Time
	MonStop     pgtype.Time
	TueStart    pgtype.Time
	TueStop     pgtype.Time
	WedStart    pgtype.Time
	WedStop     pgtype.Time
	ThurStart   pgtype.Time
	ThurStop    pgtype.Time
	FriStart    pgtype.Time
	FriStop     pgtype.Time
	SatStart    pgtype.Time
	SatStop     pgtype.Time
	SunStart    pgtype.Time
	SunStop     pgtype.Time
}
